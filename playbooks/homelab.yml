---
# - name: Update pi
#   hosts: pi
#   vars_files:
#     - secrets.yml

#   tasks:
#     - name: Install Pi-hole prerequisites
#       ansible.builtin.package:
#         name:
#           - curl
#           - dnsutils
#         state: present

#     - name: Install Pi-hole
#       ansible.builtin.shell: |
#         curl -sSL https://install.pi-hole.net | bash
#       args:
#         creates: /etc/pihole/setupVars.conf  # Check if Pi-hole is already installed

#     - name: Set Pi-hole DNS
#       ansible.builtin.lineinfile:
#         path: /etc/dhcpcd.conf
#         line: "interface eth0\n  static ip_address=192.168.1.100/24\n  static routers=192.168.1.1\n  static domain_name_servers=127.0.0.1"
#         state: present

#     - name: Configure Pi-hole to use custom DNS (if needed)
#       ansible.builtin.lineinfile:
#         path: /etc/pihole/setupVars.conf
#         regexp: '^DNS_'
#         line: "DNS_1=1.1.1.1"
#         state: present

#     - name: Configure Pi-hole web admin password
#       ansible.builtin.shell: |
#         pihole -a -p "{{ pihole_admin_password }}"
#       when: pihole_admin_password is defined

#     - name: Start and enable Pi-hole service
#       ansible.builtin.service:
#         name: pihole-FTL
#         state: started
#         enabled: true

- name: Update server
  hosts: server
  vars_files:
    - secrets.yml

  tasks:
    ## samba
    - name: Install samba
      ansible.builtin.package:
        name: samba
        state: present

    - name: Configure smb.conf
      notify: Restart samba
      ansible.builtin.template:
        src: smb.conf.j2
        dest: /etc/samba/smb.conf
        mode: u=rw,g=r,o=r

    - name: Ensure samba is enabled and running
      ansible.builtin.service:
        name: smbd
        enabled: true
        state: started

    ## rsnapshot
    - name: Install rsnapshot
      ansible.builtin.package:
        name: rsnapshot
        state: present

    - name: Configure rsnapshot.conf
      ansible.builtin.template:
        src: rsnapshot.conf.j2
        dest: /etc/rsnapshot.conf
        mode: u=rw,g=r,o=r

    - name: Configure cron.d for rsnapshot
      notify: Restart cron
      ansible.builtin.template:
        src: rsnapshot-cron.d.j2
        dest: /etc/cron.d/rsnapshot
        mode: u=rw,g=r,o=r

    - name: Ensure cron is enabled and running
      ansible.builtin.service:
        name: cron
        enabled: true
        state: started

    ## prometheus
    # https://oastic.com/posts/how-to-monitor-an-ubuntu-server-with-grafana-and-prometheus/
    # Installed and it starts up every time I guess?
    # Prometheus Node Exporter used for metric collection https://github.com/prometheus/node_exporter
    # Need to update the OS collector mount points for Node exporter to catch it?
    # --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    # Remove "dev"
    # --collector.filesystem.mount-points-exclude=^/(proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    # https://github.com/prometheus/node_exporter/blob/master/collector/diskstats_linux.go
    # https://github.com/prometheus/node_exporter/issues/332
    - name: Install prometheus
      ansible.builtin.include_role:
        name: prometheus.prometheus.prometheus
      vars:
        prometheus_scrape_configs: [
          {
            "job_name": "prometheus",
            "metrics_path": "{{ prometheus_metrics_path }}",
            "static_configs": [{"targets": ["{{ ansible_host }}:9090"]}]
          },
          {
            "job_name": "node_exporter",
            "metrics_path": "{{ prometheus_metrics_path }}",
            "static_configs": [{"targets": ["{{ ansible_host }}:9100"]}]
          },
        ]

    - name: Install node_exporter
      ansible.builtin.include_role:
        name: prometheus.prometheus.node_exporter

    ## grafana
    - name: Load grafana alerts
      ansible.builtin.set_fact:
        alerts: "{{ lookup('file', 'grafana_alerts.json') }}"

    - name: Install grafana-server
      ansible.builtin.include_role:
        name: grafana.grafana.grafana
      vars:
        grafana_ini:
          grafana_alert_notifications:
            notifiers:
              - name: admin
                type: email
                uid: admin_channel
                is_default: true
                send_reminder: false
                settings:
                  addresses: "{{ grafana_notifications_service_account_user }}"
                  autoResolve: true
          grafana_alert_resources: "{{ alerts }}" # TODO: Alarms weird
          grafana_dashboards: # TODO: Dashboard not working
            - dashboard_id: 1860
              revision_id: latest # 37 https://grafana.com/grafana/dashboards/1860-node-exporter-full/
              datasource: prometheus
          grafana_dashboards_dir: "dashboards"
          grafana_datasources:
            - name: prometheus
              type: prometheus
              access: proxy
              basicAuth: false
              url: http://localhost:9090
          grafana_api_keys_dir: "{{ lookup('env', 'HOME') }}/grafana/keys"
          security:
            admin_user: "{{ grafana_admin_user }}"
            admin_password: "{{ grafana_admin_password }}"
          smtp:
            enabled: true
            host: smtp.gmail.com:465
            user: "{{ grafana_notifications_service_account_user }}"
            password: "{{ grafana_notifications_service_account_pass }}"
            skip_verify: true
          database:
            type: "sqlite3"  # Or "mysql" or "postgres"
            path: "/var/lib/grafana/grafana.db"  # For SQLite
          paths:
            logs: "/var/log/grafana"
            data: "/var/lib/grafana"
          server:
            http_addr: "0.0.0.0"
            http_port: 3000
            domain: "{{ ansible_facts['fqdn'] | default(ansible_host) | default('localhost') }}"
            protocol: http
            enforce_domain: false
            socket: ""
            cert_key: ""
            cert_file: ""
            enable_gzip: false
            static_root_path: public
            router_logging: false
            serve_from_sub_path: false
          grafana_plugins: []
          grafana_api_keys: []
          auth: {}
          grafana_ldap: {}
          grafana_environment: {}


    ## TODO: vaultwarden
    # https://github.com/dani-garcia/vaultwarden/wiki
    # - name: Install vaultwarden
    #   community.docker.docker_container:
    #     name: vaultwarden
    #     image: vaultwarden/server
    #     state: started
    #     restart_policy: always
    #     published_ports:
    #       - "80:80"
    #       - "443:443"
    #     env:
    #       - ROCKET_PORT=443
    #       - ROCKET_TLS='{certs="/path/to/cert.crt",key="/path/to/cert.key"}'

  handlers:
    - name: Restart samba
      ansible.builtin.service:
        name: smbd
        state: restarted

    - name: Restart cron
      ansible.builtin.service:
        name: cron
        state: restarted
