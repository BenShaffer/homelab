---
# - name: Update pi
#   hosts: pi
#   vars_files:
#     - secrets.yml

#   tasks:
#     - name: Install Pi-hole prerequisites
#       ansible.builtin.package:
#         name:
#           - curl
#           - dnsutils
#         state: present

#     - name: Install Pi-hole
#       ansible.builtin.shell: |
#         curl -sSL https://install.pi-hole.net | bash
#       args:
#         creates: /etc/pihole/setupVars.conf  # Check if Pi-hole is already installed

#     - name: Set Pi-hole DNS
#       ansible.builtin.lineinfile:
#         path: /etc/dhcpcd.conf
#         line: "interface eth0\n  static ip_address=192.168.1.100/24\n  static routers=192.168.1.1\n  static domain_name_servers=127.0.0.1"
#         state: present

#     - name: Configure Pi-hole to use custom DNS (if needed)
#       ansible.builtin.lineinfile:
#         path: /etc/pihole/setupVars.conf
#         regexp: '^DNS_'
#         line: "DNS_1=1.1.1.1"
#         state: present

#     - name: Configure Pi-hole web admin password
#       ansible.builtin.shell: |
#         pihole -a -p "{{ pihole_admin_password }}"
#       when: pihole_admin_password is defined

#     - name: Start and enable Pi-hole service
#       ansible.builtin.service:
#         name: pihole-FTL
#         state: started
#         enabled: true

- name: Update server
  hosts: server
  vars_files:
    - secrets.yml
    - grafana.yml

  tasks:
    ## samba
    - name: Install samba
      ansible.builtin.package:
        name: samba
        state: present

    - name: Configure smb.conf
      notify: Restart samba
      ansible.builtin.template:
        src: smb.conf.j2
        dest: /etc/samba/smb.conf
        mode: u=rw,g=r,o=r

    - name: Ensure samba is enabled and running
      ansible.builtin.service:
        name: smbd
        enabled: true
        state: started

    ## rsnapshot
    - name: Install rsnapshot
      ansible.builtin.package:
        name: rsnapshot
        state: present

    - name: Configure rsnapshot.conf
      ansible.builtin.template:
        src: rsnapshot.conf.j2
        dest: /etc/rsnapshot.conf
        mode: u=rw,g=r,o=r

    - name: Configure cron.d for rsnapshot
      notify: Restart cron
      ansible.builtin.template:
        src: rsnapshot-cron.d.j2
        dest: /etc/cron.d/rsnapshot
        mode: u=rw,g=r,o=r

    - name: Ensure cron is enabled and running
      ansible.builtin.service:
        name: cron
        enabled: true
        state: started

    ## prometheus
    - name: Install prometheus
      ansible.builtin.include_role:
        name: prometheus.prometheus.prometheus
      vars:
        prometheus_scrape_configs: [
          {
            "job_name": "prometheus",
            "metrics_path": "{{ prometheus_metrics_path }}",
            "static_configs": [{"targets": ["localhost:9090"]}]
          },
          {
            "job_name": "node_exporter",
            "metrics_path": "{{ prometheus_metrics_path }}",
            "static_configs": [{"targets": ["localhost:9100"]}]
          },
        ]

    - name: Install node_exporter
      ansible.builtin.include_role:
        name: prometheus.prometheus.node_exporter

    ## grafana
    - name: Install grafana-server
      ansible.builtin.include_role:
        name: grafana.grafana.grafana
      vars:
        grafana_ini: "{{ grafana_config.ini }}"
        grafana_alert_resources: "{{ grafana_config.grafana_alert_resources }}"
        grafana_dashboards: "{{ grafana_config.grafana_dashboards }}"
        grafana_dashboards_dir: "{{ grafana_config.grafana_dashboards_dir }}"
        grafana_datasources: "{{ grafana_config.grafana_datasources }}"
        grafana_api_keys_dir: "{{ grafana_config.grafana_api_keys_dir }}"
        grafana_provisioning_synced: true


    ## TODO: vaultwarden
    # https://github.com/dani-garcia/vaultwarden/wiki
    # - name: Install vaultwarden
    #   community.docker.docker_container:
    #     name: vaultwarden
    #     image: vaultwarden/server
    #     state: started
    #     restart_policy: always
    #     published_ports:
    #       - "80:80"
    #       - "443:443"
    #     env:
    #       - ROCKET_PORT=443
    #       - ROCKET_TLS='{certs="/path/to/cert.crt",key="/path/to/cert.key"}'

  handlers:
    - name: Restart samba
      ansible.builtin.service:
        name: smbd
        state: restarted

    - name: Restart cron
      ansible.builtin.service:
        name: cron
        state: restarted

# TODO: Add script to cron that executes the latest playbook from git every week
